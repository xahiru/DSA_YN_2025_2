1. Write a C program to implement a stack using an array with the following operations:

    push() – to insert an element into the stack

    pop() – to remove an element from the stack

    peek() – to find the top element of the stack

    isEmpty() – to check whether the stack is empty or not

    Test Data / Expected Output:
        Create a stack object:
        Check if the stack is empty: 1
        Insert some elements onto the stack:
        Stack elements: 4 5 6 7
        Remove an element from the stack! 4
        Stack elements: 5 6 7


2. Write a C program to implement a stack using an array and structure, and calculate the average value of all elements currently stored in the stack.

    Use the following structure definition:
    
    typedef struct {
    SElemType *base;
    SElemType *top;
    int stacksize;
    } SqStack;

    Test Data / Expected Output:
        Create a stack object:
        Insert some elements onto the stack:
        Stack elements: 4 5 6 7
        Average value of stack elements: 5.50


3. Write a C program to implement a stack using an array and structure, and remove any duplicate elements from the stack.

    Use the following structure definition:
    typedef struct {
    SElemType *base;
    SElemType *top;
    int stacksize;
    } SqStack;

    Test Data / Expected Output:
        Create a stack object:
        Insert elements onto the stack:
        Stack elements: 4 5 6 4 7 5
        Remove duplicate elements:
        Stack elements after removing duplicates: 4 5 6 7

4. Write a C program to implement a stack using a linked list with the following operations:

    push() – to insert (push) an element onto the stack

    pop() – to remove (pop) an element from the stack

    display() – to display all stack elements

    Test Data / Expected Output:
        Input some elements onto the stack (using linked list):
        Stack elements are: 1 3 5 6
        Remove 2 elements from the stack:
        Stack elements are: 5 6
        Input 2 more elements:
        Stack elements are: 9 8 5 6



5. Write a C program to implement a stack using a linked list, and then reverse the elements of the stack.

    The program should include:

    push() — to insert elements onto the stack

    pop() — to remove elements from the stack

    display() — to show all stack elements

    reverseStack() — to reverse the order of elements in the stack

    Test Data / Expected Output:
        Input some elements onto the stack:
        Stack elements are: 1 3 5 6
        Reverse the elements of the stack:
        Stack elements are: 6 5 3 1
